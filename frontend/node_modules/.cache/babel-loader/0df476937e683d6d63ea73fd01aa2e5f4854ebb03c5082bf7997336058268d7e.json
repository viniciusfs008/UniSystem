{"ast":null,"code":"var _jsxFileName = \"/app/src/components/Charts/ChartLineIncidencia.jsx\";\nimport Chart from \"react-apexcharts\";\nimport \"./chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartColumn({\n  data,\n  selectedCities,\n  column,\n  title1,\n  title2,\n  name\n}) {\n  const valores = [...new Set(data.map(item => item[column]))].sort();\n  let series = [];\n\n  // delimitando numero de casas decimais de data.Incidencia\n\n  // if que coloca apenas o valores de 'Mato Grosso'\n  if (selectedCities.length === 0) {\n    // Criar uma série de dados para cidade 'Mato Grosso'\n    const totalCasos = valores.map(valor => {\n      const record = data.find(item => item[column] === valor && item.MunicipioResidencia === \"Mato Grosso\");\n      return record ? record.Incidencia : 0;\n    });\n    totalCasos.forEach((element, index) => {\n      totalCasos[index] = element.toFixed(2);\n    });\n\n    // Criar uma única série de dados para representar o total de incidencia\n    series.push({\n      name: name ? name : \"Coeficiente de Incidência\",\n      data: totalCasos\n    });\n  } else {\n    series = selectedCities.map(city => {\n      return {\n        name: city,\n        data: valores.map(valor => {\n          const record = data.find(item => item[column] === valor && item.MunicipioResidencia === city);\n          return record ? record.Incidencia : 0;\n        })\n      };\n    });\n  }\n  const options = {\n    dataLabels: {\n      enabled: true\n    },\n    chart: {\n      type: \"line\"\n    },\n    stroke: {\n      width: 3,\n      curve: \"straight\"\n    },\n    xaxis: {\n      categories: valores,\n      title: {\n        text: title1,\n        style: {\n          color: \"var(--text-50)\"\n        }\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\"\n        }\n      }\n    },\n    yaxis: {\n      title: {\n        text: title2,\n        style: {\n          color: \"var(--text-50)\"\n        }\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\"\n        }\n      }\n    },\n    tooltip: {\n      theme: false,\n      y: {\n        formatter: function (val) {\n          return val + \"  \";\n        }\n      }\n    },\n    legend: {\n      labels: {\n        colors: \"var(--text-50)\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: options,\n    series: series,\n    type: \"line\",\n    height: \"100%\",\n    width: \"100%\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_c = ChartColumn;\nvar _c;\n$RefreshReg$(_c, \"ChartColumn\");","map":{"version":3,"names":["Chart","jsxDEV","_jsxDEV","ChartColumn","data","selectedCities","column","title1","title2","name","valores","Set","map","item","sort","series","length","totalCasos","valor","record","find","MunicipioResidencia","Incidencia","forEach","element","index","toFixed","push","city","options","dataLabels","enabled","chart","type","stroke","width","curve","xaxis","categories","title","text","style","color","labels","colors","yaxis","tooltip","theme","y","formatter","val","legend","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/components/Charts/ChartLineIncidencia.jsx"],"sourcesContent":["import Chart from \"react-apexcharts\";\nimport \"./chart.css\";\n\nexport default function ChartColumn({\n  data,\n  selectedCities,\n  column,\n  title1,\n  title2,\n  name,\n}) {\n  const valores = [...new Set(data.map((item) => item[column]))].sort();\n  let series = [];\n\n  // delimitando numero de casas decimais de data.Incidencia\n\n\n  // if que coloca apenas o valores de 'Mato Grosso'\n  if (selectedCities.length === 0) {\n    \n    // Criar uma série de dados para cidade 'Mato Grosso'\n    const totalCasos = valores.map((valor) => {\n      const record = data.find(\n        (item) =>\n          item[column] === valor && item.MunicipioResidencia === \"Mato Grosso\"\n      );\n      return record ? record.Incidencia : 0;\n    }\n    );\n\n\n    totalCasos.forEach((element, index) => {\n      totalCasos[index] = element.toFixed(2);\n    }\n    );\n\n\n    // Criar uma única série de dados para representar o total de incidencia\n    series.push({\n      name: name ? name : \"Coeficiente de Incidência\",\n      data: totalCasos,\n    });\n\n  } else {\n    series = selectedCities.map((city) => {\n      return {\n        name: city,\n        data: valores.map((valor) => {\n          const record = data.find(\n            (item) =>\n              item[column] === valor && item.MunicipioResidencia === city\n          );\n          return record ? record.Incidencia : 0;\n        }),\n      };\n    });\n  }\n\n  const options = {\n    dataLabels: {\n      enabled: true,\n    },\n    chart: {\n      type: \"line\",\n    },\n    stroke: {\n      width: 3,\n      curve: \"straight\",\n    },\n    xaxis: {\n      categories: valores,\n      title: {\n        text: title1,\n        style: {\n          color: \"var(--text-50)\",\n        },\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\",\n        },\n      },\n    },\n    yaxis: {\n      title: {\n        text: title2,\n        style: {\n          color: \"var(--text-50)\",\n        },\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\",\n        },\n      },\n    },\n    tooltip: {\n      theme: false,\n      y: {\n        formatter: function (val) {\n          return val + \"  \";\n        },\n      },\n    },\n    legend: {\n      labels: {\n        colors: \"var(--text-50)\",\n      },\n    },\n  };\n\n  return (\n    <Chart\n      options={options}\n      series={series}\n      type=\"line\"\n      height=\"100%\"\n      width=\"100%\"\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}