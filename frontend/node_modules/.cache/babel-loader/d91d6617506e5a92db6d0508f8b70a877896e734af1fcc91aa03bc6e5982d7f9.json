{"ast":null,"code":"var _jsxFileName = \"/Users/viniciusferrari/dev/DashBoard/frontend/src/components/Charts/ChartIdade.jsx\";\nimport React from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartIdade = ({\n  data,\n  selectedCities,\n  name\n}) => {\n  // Preparando os dados para o gráfico de barras por faixa etária\n  const faixasEtarias = [...new Set(data.map(item => item.FaixaEtaria))];\n  const categories = faixasEtarias.map(faixa => faixa.substring(3));\n  let series = [];\n  // Organizar os dados em um formato adequado para o gráfico\n  if (selectedCities.length === 0) {\n    // Se nenhum cidade selecionada, calcular o total de casos para todas as cidades\n    const totalCasos = faixasEtarias.map(faixa => {\n      const totalFaixa = data.filter(item => item.FaixaEtaria === faixa).reduce((acc, curr) => acc + curr.NumeroCasos, 0);\n      return totalFaixa;\n    });\n\n    // Criar uma única série de dados para representar o total de casos\n    series.push({\n      name: name ? name : \"Percentual de Casos\",\n      data: totalCasos.map((total, index) => {\n        return total / totalCasos.reduce((a, b) => a + b, 0) * 100;\n      })\n    });\n  } else {\n    // Se cidades selecionadas, calcular os casos para cada cidade\n    series = selectedCities.map(city => {\n      const cityTotal = data.filter(item => item.MunicipioResidencia === city).reduce((acc, curr) => acc + curr.NumeroCasos, 0);\n      return {\n        name: city,\n        data: faixasEtarias.map(faixa => {\n          const record = data.find(item => item.FaixaEtaria === faixa && item.MunicipioResidencia === city);\n          return record ? record.NumeroCasos / cityTotal * 100 : 0;\n        })\n      };\n    });\n  }\n\n  // Arredondar os valores das faixas etárias para duas casas decimais\n  // categories = faixasEtarias.map((faixa) => Math.round(faixa * 100) / 100);\n\n  // Configuração do gráfico de barras\n  const chartData = {\n    options: {\n      dataLabels: {\n        formatter: function (val) {\n          return val.toFixed(0) + \"%\"; // Formatar para duas casas decimais\n        },\n        enabled: true\n      },\n      chart: {\n        type: \"bar\"\n      },\n      plotOptions: {\n        bar: {\n          borderRadius: 4,\n          borderRadiusApplication: \"end\",\n          horizontal: false\n        }\n      },\n      xaxis: {\n        title: {\n          text: \"Faixa Etária\",\n          style: {\n            color: \"var(--text-50)\"\n          }\n        },\n        categories: categories,\n        labels: {\n          style: {\n            fontSize: \"12px\",\n            colors: \"var(--text-50)\"\n          }\n        }\n      },\n      yaxis: {\n        title: {\n          text: name ? name : \"Percentual de Casos\",\n          style: {\n            color: \"var(--text-50)\"\n          }\n        },\n        labels: {\n          formatter: function (val) {\n            return val.toFixed(0) + \"%\"; // Formatar para duas casas decimais\n          },\n          style: {\n            colors: \"var(--text-50)\"\n          }\n        }\n      },\n      tooltip: {\n        theme: false,\n        y: {\n          formatter: function (val) {\n            return val.toFixed(2) + \"%\";\n          }\n        }\n      },\n      legend: {\n        labels: {\n          colors: \"var(--text-50)\"\n        },\n        markers: {\n          radius: \"50%\"\n        }\n      }\n      // colors: [\"#008FFB\"], // Cor das barras\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: chartData.options,\n    series: series,\n    type: \"bar\",\n    height: \"100%\",\n    width: \"100%\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_c = ChartIdade;\nexport default ChartIdade;\nvar _c;\n$RefreshReg$(_c, \"ChartIdade\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","ChartIdade","data","selectedCities","name","faixasEtarias","Set","map","item","FaixaEtaria","categories","faixa","substring","series","length","totalCasos","totalFaixa","filter","reduce","acc","curr","NumeroCasos","push","total","index","a","b","city","cityTotal","MunicipioResidencia","record","find","chartData","options","dataLabels","formatter","val","toFixed","enabled","chart","type","plotOptions","bar","borderRadius","borderRadiusApplication","horizontal","xaxis","title","text","style","color","labels","fontSize","colors","yaxis","tooltip","theme","y","legend","markers","radius","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/viniciusferrari/dev/DashBoard/frontend/src/components/Charts/ChartIdade.jsx"],"sourcesContent":["import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nconst ChartIdade = ({ data, selectedCities, name }) => {\n  // Preparando os dados para o gráfico de barras por faixa etária\n  const faixasEtarias = [...new Set(data.map((item) => item.FaixaEtaria))];\n\n  const categories = faixasEtarias.map((faixa) => faixa.substring(3));\n\n  let series = [];\n  // Organizar os dados em um formato adequado para o gráfico\n  if (selectedCities.length === 0) {\n    // Se nenhum cidade selecionada, calcular o total de casos para todas as cidades\n    const totalCasos = faixasEtarias.map((faixa) => {\n      const totalFaixa = data\n        .filter((item) => item.FaixaEtaria === faixa)\n        .reduce((acc, curr) => acc + curr.NumeroCasos, 0);\n      return totalFaixa;\n    });\n\n    // Criar uma única série de dados para representar o total de casos\n    series.push({\n      name: name ? name : \"Percentual de Casos\",\n      data: totalCasos.map((total, index) => {\n        return (total / totalCasos.reduce((a, b) => a + b, 0)) * 100;\n      }),\n    });\n  } else {\n    // Se cidades selecionadas, calcular os casos para cada cidade\n    series = selectedCities.map((city) => {\n      const cityTotal = data\n        .filter((item) => item.MunicipioResidencia === city)\n        .reduce((acc, curr) => acc + curr.NumeroCasos, 0);\n      return {\n        name: city,\n        data: faixasEtarias.map((faixa) => {\n          const record = data.find(\n            (item) =>\n              item.FaixaEtaria === faixa && item.MunicipioResidencia === city\n          );\n          return record ? (record.NumeroCasos / cityTotal) * 100 : 0;\n        }),\n      };\n    });\n  }\n\n  // Arredondar os valores das faixas etárias para duas casas decimais\n  // categories = faixasEtarias.map((faixa) => Math.round(faixa * 100) / 100);\n\n  // Configuração do gráfico de barras\n  const chartData = {\n    options: {\n      dataLabels: {\n        formatter: function (val) {\n          return val.toFixed(0) + \"%\"; // Formatar para duas casas decimais\n        },\n        enabled: true,\n        \n      },\n\n      chart: {\n        type: \"bar\",\n      },\n\n      plotOptions: {\n        bar: {\n          borderRadius: 4,\n          borderRadiusApplication: \"end\",\n          horizontal: false,\n        },\n      },\n\n      xaxis: {\n        title: {\n          text: \"Faixa Etária\",\n          style: {\n            color: \"var(--text-50)\",\n          },\n        },\n        categories: categories,\n        labels: {\n          style: {\n            fontSize: \"12px\",\n            colors: \"var(--text-50)\",\n          },\n        },\n      },\n\n      yaxis: {\n        title: {\n          text: name ? name : \"Percentual de Casos\",\n          style: {\n            color: \"var(--text-50)\",\n          },\n        },\n\n        labels: {\n          formatter: function (val) {\n            return val.toFixed(0) + \"%\"; // Formatar para duas casas decimais\n          },\n          style: {\n            colors: \"var(--text-50)\",\n          },\n        },\n      },\n\n      tooltip: {\n        theme: false,\n        y: {\n          formatter: function (val) {\n            return val.toFixed(2) + \"%\";\n          },\n        },\n      },\n\n      legend: {\n        labels: {\n          colors: \"var(--text-50)\",\n        },\n        markers: {\n          radius: \"50%\",\n        },\n      },\n      // colors: [\"#008FFB\"], // Cor das barras\n    },\n  };\n\n  return (\n    <Chart\n      options={chartData.options}\n      series={series}\n      type=\"bar\"\n      height=\"100%\"\n      width=\"100%\"\n    />\n  );\n};\n\nexport default ChartIdade;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}