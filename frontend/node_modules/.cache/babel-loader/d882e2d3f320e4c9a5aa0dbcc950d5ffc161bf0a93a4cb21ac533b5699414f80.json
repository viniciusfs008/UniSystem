{"ast":null,"code":"var _jsxFileName = \"/Users/viniciusferrari/dev/DashBoard/frontend/src/components/Charts/ChartLine.jsx\";\nimport Chart from \"react-apexcharts\";\nimport './chart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartColumn({\n  data,\n  selectedCities,\n  column,\n  title1,\n  title2,\n  name\n}) {\n  // Extrair os anos e as cidades do conjunto de dados\n  const valores = [...new Set(data.map(item => item[column]))];\n  let series = [];\n  // Organizar os dados em um formato adequado para o gráfico\n  if (selectedCities.length === 0) {\n    // Se nenhum cidade selecionada, calcular o total de casos para todas as cidades\n    const totalCasos = valores.map(valor => {\n      const totalItens = data.filter(item => item[column] === valor).reduce((acc, curr) => acc + curr.NumeroCasos, 0);\n      return totalItens;\n    });\n\n    // Criar uma única série de dados para representar o total de casos\n    series.push({\n      name: name ? name : \"Número de Casos\",\n      data: totalCasos\n    });\n  } else {\n    // Se cidades selecionadas, calcular os casos para cada cidade\n    series = selectedCities.map(city => {\n      return {\n        name: city,\n        data: valores.map(valor => {\n          const record = data.find(item => item[column] === valor && item.MunicipioResidencia === city);\n          return record ? record.NumeroCasos : 0;\n        })\n      };\n    });\n  }\n\n  // Configurações do gráfico\n  const options = {\n    dataLabels: {\n      enabled: true\n    },\n    chart: {\n      type: \"line\"\n    },\n    stroke: {\n      width: 3,\n      curve: \"straight\"\n    },\n    xaxis: {\n      categories: valores,\n      title: {\n        text: title1,\n        style: {\n          color: \"var(--text-50)\"\n        }\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\"\n        }\n      }\n    },\n    yaxis: {\n      title: {\n        text: title2,\n        style: {\n          color: \"var(--text-50)\"\n        }\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\"\n        }\n      }\n    },\n    tooltip: {\n      theme: false,\n      y: {\n        formatter: function (val) {\n          return val;\n        }\n      }\n    },\n    legend: {\n      labels: {\n        colors: \"var(--text-50)\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: options,\n    series: series,\n    type: \"line\",\n    height: \"100%\",\n    width: \"100%\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this);\n}\n_c = ChartColumn;\nvar _c;\n$RefreshReg$(_c, \"ChartColumn\");","map":{"version":3,"names":["Chart","jsxDEV","_jsxDEV","ChartColumn","data","selectedCities","column","title1","title2","name","valores","Set","map","item","series","length","totalCasos","valor","totalItens","filter","reduce","acc","curr","NumeroCasos","push","city","record","find","MunicipioResidencia","options","dataLabels","enabled","chart","type","stroke","width","curve","xaxis","categories","title","text","style","color","labels","colors","yaxis","tooltip","theme","y","formatter","val","legend","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/viniciusferrari/dev/DashBoard/frontend/src/components/Charts/ChartLine.jsx"],"sourcesContent":["import Chart from \"react-apexcharts\";\nimport './chart.css';\n\nexport default function ChartColumn({ data, selectedCities, column, title1, title2, name}) {\n  // Extrair os anos e as cidades do conjunto de dados\n  const valores = [...new Set(data.map((item) => item[column]))];\n\n  let series = [];\n  // Organizar os dados em um formato adequado para o gráfico\n  if (selectedCities.length === 0) {\n    // Se nenhum cidade selecionada, calcular o total de casos para todas as cidades\n    const totalCasos = valores.map((valor) => {\n      const totalItens = data\n        .filter((item) => item[column] === valor)\n        .reduce((acc, curr) => acc + curr.NumeroCasos, 0);\n      return totalItens;\n    });\n\n    // Criar uma única série de dados para representar o total de casos\n    series.push({\n      name: name ? name : \"Número de Casos\",\n      data: totalCasos,\n    });\n  } else {\n    // Se cidades selecionadas, calcular os casos para cada cidade\n    series = selectedCities.map((city) => {\n      return {\n        name: city,\n        data: valores.map((valor) => {\n          const record = data.find(\n            (item) =>\n              item[column] === valor && item.MunicipioResidencia === city\n          );\n          return record ? record.NumeroCasos : 0;\n        }),\n      };\n    });\n  }\n\n  // Configurações do gráfico\n  const options = {\n    dataLabels: {\n      enabled: true,\n    },\n    chart: {\n      type: \"line\",\n    },\n    stroke: {\n        width: 3,\n        curve: \"straight\",\n      },\n    xaxis: {\n      categories: valores,\n      title: {\n        text: title1,\n        style: {\n          color: \"var(--text-50)\",\n        },\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\",\n        },\n      },\n    },\n    yaxis: {\n      title: {\n        text: title2,\n        style: {\n          color: \"var(--text-50)\",\n        },\n      },\n      labels: {\n        style: {\n          colors: \"var(--text-50)\",\n        },\n      },\n    },\n    tooltip: {\n      theme: false,\n      y: {\n        formatter: function (val) {\n          return val;\n        },\n      },\n    },\n    legend: {\n      labels: {\n        colors: \"var(--text-50)\",\n      },\n    },\n  };\n\n  return (\n      <Chart\n        options={options}\n        series={series}\n        type=\"line\"\n        height=\"100%\"\n        width=\"100%\"\n      />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}